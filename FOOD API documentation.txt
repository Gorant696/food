INSTRUCTIONS:

- define name of database and other connection parameters in .env file in root of laravel project

- run "php artisan install:app" command (This creates database, migrate and seed data. If database already exists, it reinstall whole application)


    |--------------------------|
       -- SENDING REQUESTS --
    |--------------------------|


- send Content-Type Header with "application/json" value with each request. 

- Request body needs to contain valid json object with appropriate parameters. Read further text for more details


*****************************************************************************************************

    |--------------------------|
    -- GET FOODS BY FILTERING --
    |--------------------------|

SAMPLE OBJECT FOR SENDING REQUEST:

METHOD: GET
ROUTE: {base_url}/api/foods

{
	"tags": [2],
	"category_id": 1,
	"language_id": 1,
	"per_page": 8,
	"page": 1,
	"with": ["tags", "ingredients", "categories"],
	"diff_time": "2018-11-22"
}

Parameter description:

"tags" - Array of tag IDs, optional
"category_id" - ID of category from "categories" table, optional
"language_id" - ID of language from "languages" table, required
"per_page" - Integer, indicates how many results to show per page paginate resource results, optional
"page" - Integer, target specific page when paginate resourcce results, optional
"with" - Array, available values: tags, ingredients, categories, optional
"diff_time" - Date, needs to be sent in Y-m-d format, optional



*****************************************************************************************************

    |----------------|
    --INSERTING FOOD--
    |----------------|

SAMPLE OBJECT FOR SENDING REQUEST:

METHOD: POST
ROUTE: {base_url}/api/foods

{
    "slug": "burger",
    "food_trans_hr": {
        "language_id": 1,
        "title": "Hamburger",
        "description": "Tradicionalno ameriƒçko jelo",
        "category_id" : 1
    },
    "food_trans_en": {
        "language_id": 2,
        "title": "Hamburger",
        "description": "Traditional american food",
        "category_id": 1
    },
    "tags": [1,2],
    "ingredients":[1,5]
}

Parameter description:

"slug" - string, required, only lowercase letters, integers and underscores available
"tags" - Array of tag IDs, optional
"food_trans_hr"  - Array (4 default keys are: language_id, title, description, category_id)
                 - language_id - required, integer, Id of selected language (for example ID of hr language)
                 - title - required, string
                 - description - required, string
                 - category_id - optional, integer, id of selected category, nullable
"food_trans_en"  - Array (4 default keys are: language_id, title, description, category_id)
                 - language_id - required, integer, Id of selected language (for example ID of en language)
                 - title - required, string
                 - description - required, string
                 - category_id - optional, integer, id of selected category, nullable
"tags" - Array of tag IDs, optional
"ingredients" - Array of ingredient IDs, optional

*****************************************************************************************************

    |---------------|
    --DELETING FOOD--
    |---------------|

SAMPLE OBJECT FOR SENDING REQUEST:

METHOD: DELETE
ROUTE: {base_url}/api/foods

{
    "ids": [1,2,3]
}

Parameter description:

"ids" - Array of food IDs (array values needs to be integer data type), required


*****************************************************************************************************

    |------------------------|
    --RESTORING DELETED FOOD--
    |------------------------|

SAMPLE OBJECT FOR SENDING REQUEST:

METHOD: PUT
ROUTE: {base_url}/api/foods

{
    "ids": [1,2,3]
}

Parameter description:

"ids" - Array of soft deleted foods IDs (array values needs to be integer data type), required

